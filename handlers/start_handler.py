from telebot.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from bot import bot
from config import ONE_REF_PRICE, ADMIN_IDS
from db.db import get_orders, add_order, confirm_order

drafts = {}


def clearDraft(telegram_id):
    drafts[telegram_id] = None


def getMarkupForStart():
    inline_markup = InlineKeyboardMarkup()
    inline_markup.row(InlineKeyboardButton('üíé –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑', callback_data='/new_order'))
    inline_markup.row(InlineKeyboardButton('‚úÖ –ú–æ–∏ –∑–∞–∫–∞–∑—ã', callback_data='/orders'),
                      InlineKeyboardButton('üëâ –ú–µ–Ω—é', callback_data='/menu'))
    return inline_markup


@bot.callback_query_handler(func=lambda call: call.data == '/menu')
def menu(call: CallbackQuery):
    bot.clear_step_handler_by_chat_id(call.message.chat.id)
    clearDraft(call.from_user.id)
    start(call.message)
    bot.answer_callback_query(call.id)


def format_order(order: dict, new=False, username="–ù–µ—Ç"):
    text = (f'#Ô∏è‚É£ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #{order.get("id")}\n'
            '–ù–∞–∑–≤–∞–Ω–∏–µ: <b>–†–µ—Ñ–µ—Ä–∞–ª—ã –¥–ª—è DOGS</b>\n'
            f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{order.get("count")}</b>\n'
            f'–°—Ç–∞—Ç—É—Å: <b>{order.get("status")}</b>\n'
            f'–¶–µ–Ω–∞ –∑–∞ –æ–¥–Ω–æ–≥–æ: <b>{order.get("price") / order.get("count")}‚ÇΩ</b>\n'
            f'–°—É–º–º–∞: <b>{order.get("price")}‚ÇΩ</b>\n'
            f'–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: <b>{order.get("description", "–ù–µ—Ç")}</b>\n')
    if new:
        text = (f"<b>–ù–û–í–´–ô –ó–ê–ö–ê–ó #{order.get('id')} –ù–ê {order.get('price')}!!!‚ÇΩ\n</b>\n"
                f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {username}\n\n") + text
    return text


def getMarkupToConfirm(id: int):
    inline_markup = InlineKeyboardMarkup()
    inline_markup.row(InlineKeyboardButton('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data=f'/confirm:{id}'))
    return inline_markup


@bot.callback_query_handler(func=lambda call: call.data == '/orders')
def orders(call: CallbackQuery):
    bot.clear_step_handler_by_chat_id(call.message.chat.id)
    clearDraft(call.from_user.id)
    order_list = get_orders(call.from_user.id)

    if len(order_list) == 0:
        bot.send_message(call.from_user.id, "–ó–∞–∫–∞–∑–æ–≤ –µ—â–µ –Ω–µ—Ç")
    else:
        formatted_orders_list = list(map(lambda order: format_order(order), order_list))
        bot.send_message(call.from_user.id, '\n\n'.join(formatted_orders_list), parse_mode="HTML")

    bot.answer_callback_query(call.id)


@bot.callback_query_handler(func=lambda call: '/confirm' in call.data)
def confirm(call: CallbackQuery):
    id = call.data.split(':')[1]
    confirm_order(id)
    bot.send_message(call.from_user.id, "‚úÖ –£—Å–ø–µ—à–Ω–æ")

    bot.answer_callback_query(call.id)


def ref_count_handler(message: Message):
    try:
        count = int(message.text)
        if count < 1 or count > 200:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 200")
    except ValueError as e:
        bot.send_message(message.chat.id, str(e))
        bot.register_next_step_handler(message, ref_count_handler)
        return

    drafts[message.from_user.id] = {'count': count, 'price': count * ONE_REF_PRICE}

    bot.send_message(message.chat.id, "üîç –î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (optional) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip")
    bot.register_next_step_handler(message, ref_description_handler)


def ref_description_handler(message: Message):
    user_id = message.from_user.id
    drafts[user_id]['description'] = message.text if message.text.lower() != "/skip" else "–ù–µ—Ç"

    order = add_order(user_id, **drafts[user_id])
    bot.send_message(message.chat.id, "‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
    bot.send_message(message.chat.id, "üßë‚Äçüíª –°–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –¥–ª—è –æ–ø–ª–∞—Ç—ã: <b>@aircradmin</b>", parse_mode="HTML")
    for i in ADMIN_IDS:
        bot.send_message(i, format_order(order, new=True, username=f'@{message.chat.username}'), parse_mode="HTML", reply_markup=getMarkupToConfirm(user_id))

    bot.clear_step_handler_by_chat_id(message.chat.id)
    del drafts[user_id]


@bot.callback_query_handler(func=lambda call: call.data == '/new_order')
def new_order(call: CallbackQuery):
    bot.clear_step_handler_by_chat_id(call.message.chat.id)
    clearDraft(call.from_user.id)
    bot.send_message(call.from_user.id, "üî• –°–∫–æ–ª—å–∫–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ (1-200)")
    bot.register_next_step_handler(call.message, ref_count_handler)
    bot.answer_callback_query(call.id)


@bot.message_handler(commands=['start'])
def start(message: Message):
    text = ("<b>üåü –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é @chip_hamster_refs_bot</b>\n"
            "–û–¥–∏–Ω —Ä–µ—Ñ–µ—Ä–∞–ª: <b>69 —Ä—É–±</b>")
    with open('images/start.png', 'rb') as file:
        bot.send_photo(message.chat.id, file, caption=text, parse_mode='HTML', reply_markup=getMarkupForStart())
